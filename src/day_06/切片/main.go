package main

import "fmt"

/**
1.nil: 为空，表示未在内存中开辟一个新的空间
2.切片: 基于数组的数据类型，声明数组时需要定义数组的长度和类型，且长度不可变，切片的长度可变
3.切片基于数组，是一种引用类型的变量，如果数组的值发生改变，基于此数组的切片的值都会被改变

*/

func main() {
	// 创建go的几种方式
	// 1.自动推导
	s1 := []int{1, 2, 34}
	fmt.Println(s1)
	// 2.make函数([]切片类型， 切片长度len， 切片容量cap)，第三个参数不是必传参数，如不传则默认和切片长度相等
	// make创建的切片及时并未赋值，也不是nil，因为make创建变量的方式是在内存上开辟一块内存空间
	s2 := make([]int, 3, 5)
	fmt.Println(s2)
	// 3.通过数组截取
	a3 := [5]int{1, 2, 3, 4, 5}
	s3 := a3[:]
	fmt.Println(s3)

	// 切片没有直接删除指定位置元素的方式，只能通过截取数组的,然后扩容的形式来删除元素
	// 删除索引为3的元素
	s3 = append(a3[:3], a3[4:]...)
	fmt.Println(s3, len(s3), cap(s3))
	// 虽然切片的长度减少,但是底层数组的长度并没有减少，只是将需要被删除的之后的所有元素都往前移动了一位
	fmt.Println(a3, len(a3))
}
